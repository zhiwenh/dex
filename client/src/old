async function getTrades() {
  let tradesOfTokensToTokensPromise = dexInstance.getTradesForTokensWithTokens();
  let tradesOfTokensToEthPromise = dexInstance.getTradesForTokensWithEth();
  let tradesOfEthToTokensPromise = dexInstance.getTradesForEthWithTokens();

  const tradesOfAllArr = await Promise.all([
    tradesOfTokensToTokensPromise,
    tradesOfTokensToEthPromise,
    tradesOfEthToTokensPromise
  ]);

  let tradesOfTokensToTokens2 = tradesOfAllArr[0];
  let tradesOfTokensToEth2 = tradesOfAllArr[1];
  let tradesOfEthToTokens2 = tradesOfAllArr[2];

  let tradesOfTokensToTokens2Promise = Promise.all(tradesOfTokensToTokens2.map(async(trade) => {
    const tradingErc20Instance = new ethers.Contract(trade.tradingTokenAddress, erc20Abi, provider);
    const tradingForErc20Instance = new ethers.Contract(trade.tradingForTokenAddress, erc20Abi, provider);

    const tradingErc20Name = await tradingErc20Instance.name();
    const tradingErc20Symbol = await tradingErc20Instance.symbol();

    const tradingForErc20Name = await tradingForErc20Instance.name();
    const tradingForErc20Symbol = await tradingForErc20Instance.symbol();

    const newTrade = {};

    newTrade.sender = trade.sender;
    newTrade.indexOfTradeOfAddress = trade.indexOfTradeOfAddress;
    newTrade.tradingTokenAddress = trade.tradingTokenAddress;
    newTrade.tradingTokenAmount = trade.tradingTokenAmount;
    newTrade.tradingForTokenAddress = trade.tradingForTokenAddress;
    newTrade.tradingForTokenAmount = trade.tradingForTokenAmount;
    newTrade.alreadyTraded = trade.alreadyTraded;

    console.log('new trade in map', newTrade);

    newTrade.tradingTokenName = tradingErc20Name;
    newTrade.tradingTokenSymbol = tradingErc20Symbol;

    newTrade.tradingForTokenName = tradingForErc20Name;
    newTrade.tradingForTokenSymbol = tradingForErc20Symbol;

    return newTrade;
  }));

  let tradesOfTokensToEth2Promise = Promise.all(tradesOfTokensToEth2.map(async(trade) => {
    const tradingErc20Instance = new ethers.Contract(trade.tradingTokenAddress, erc20Abi, provider);

    const tradingErc20Name = await tradingErc20Instance.name();
    const tradingErc20Symbol = await tradingErc20Instance.symbol();

    const newTrade = {};

    newTrade.sender = trade.sender;
    newTrade.indexOfTradeOfAddress = trade.indexOfTradeOfAddress;
    newTrade.tradingTokenAddress = trade.tradingTokenAddress;
    newTrade.tradingTokenAmount = trade.tradingTokenAmount;
    newTrade.tradingForEthAmount = trade.tradingForEthAmount;
    newTrade.alreadyTraded = trade.alreadyTraded;

    newTrade.tradingTokenName = tradingErc20Name;
    newTrade.tradingTokenSymbol = tradingErc20Symbol;

    return newTrade;
  }));

  let tradesOfEthToTokens2Promise = Promise.all(tradesOfEthToTokens2.map(async(trade) => {
    const tradingForErc20Instance = new ethers.Contract(trade.tradingForTokenAddress, erc20Abi, provider);

    const tradingForErc20Name = await tradingForErc20Instance.name();
    const tradingForErc20Symbol = await tradingForErc20Instance.symbol();

    const newTrade = {};

    newTrade.sender = trade.sender;
    newTrade.indexOfTradeOfAddress = trade.indexOfTradeOfAddress;
    newTrade.tradingEthAmount = trade.tradingEthAmount;
    newTrade.tradingForTokenAddress = trade.tradingForTokenAddress;
    newTrade.tradingForTokenAmount = trade.tradingForTokenAmount;
    newTrade.alreadyTraded = trade.alreadyTraded;

    newTrade.tradingForTokenName = tradingForErc20Name;
    newTrade.tradingForTokenSymbol = tradingForErc20Symbol;

    return newTrade;
  }));

  const allTradesMappedArr = await Promise.all([
    tradesOfTokensToTokens2Promise,
    tradesOfTokensToEth2Promise,
    tradesOfEthToTokens2Promise
  ]);

  let tradesOfTokensToTokens3 = allTradesMappedArr[0];
  let tradesOfTokensToEth3 = allTradesMappedArr[1];
  let tradesOfEthToTokens3 = allTradesMappedArr[2];

  setTradesOfTokensToTokens(tradesOfTokensToTokens3);
  setTradesOfTokensToEth(tradesOfTokensToEth3);
  setTradesOfEthToTokens(tradesOfEthToTokens3);
}

getTrades();





useEffect(() => {
  async function getTrades() {
    let tradesOfTokensToTokensPromise = dexInstance.getTradesForTokensWithTokens();
    let tradesOfTokensToEthPromise = dexInstance.getTradesForTokensWithEth();
    let tradesOfEthToTokensPromise = dexInstance.getTradesForEthWithTokens();

    const tradesOfAllArr = await Promise.all([
      tradesOfTokensToTokensPromise,
      tradesOfTokensToEthPromise,
      tradesOfEthToTokensPromise
    ]);

    let tradesOfTokensToTokens2 = tradesOfAllArr[0];
    let tradesOfTokensToEth2 = tradesOfAllArr[1];
    let tradesOfEthToTokens2 = tradesOfAllArr[2];

    let tradesOfTokensToTokens3 = await Promise.all(tradesOfTokensToTokens2.map(async(trade) => {
      const tradingErc20Instance = new ethers.Contract(trade.tradingTokenAddress, erc20Abi, provider);
      const tradingForErc20Instance = new ethers.Contract(trade.tradingForTokenAddress, erc20Abi, provider);

      const tradingErc20Name = await tradingErc20Instance.name();
      const tradingErc20Symbol = await tradingErc20Instance.symbol();

      const tradingForErc20Name = await tradingForErc20Instance.name();
      const tradingForErc20Symbol = await tradingForErc20Instance.symbol();

      const newTrade = {};

      newTrade.sender = trade.sender;
      newTrade.indexOfTradeOfAddress = trade.indexOfTradeOfAddress;
      newTrade.tradingTokenAddress = trade.tradingTokenAddress;
      newTrade.tradingTokenAmount = trade.tradingTokenAmount;
      newTrade.tradingForTokenAddress = trade.tradingForTokenAddress;
      newTrade.tradingForTokenAmount = trade.tradingForTokenAmount;
      newTrade.alreadyTraded = trade.alreadyTraded;

      console.log('new trade in map', newTrade);

      newTrade.tradingTokenName = tradingErc20Name;
      newTrade.tradingTokenSymbol = tradingErc20Symbol;

      newTrade.tradingForTokenName = tradingForErc20Name;
      newTrade.tradingForTokenSymbol = tradingForErc20Symbol;

      return newTrade;
    }));

    let tradesOfTokensToEth3 = await Promise.all(tradesOfTokensToEth2.map(async(trade) => {
      const tradingErc20Instance = new ethers.Contract(trade.tradingTokenAddress, erc20Abi, provider);

      const tradingErc20Name = await tradingErc20Instance.name();
      const tradingErc20Symbol = await tradingErc20Instance.symbol();

      const newTrade = {};

      newTrade.sender = trade.sender;
      newTrade.indexOfTradeOfAddress = trade.indexOfTradeOfAddress;
      newTrade.tradingTokenAddress = trade.tradingTokenAddress;
      newTrade.tradingTokenAmount = trade.tradingTokenAmount;
      newTrade.tradingForEthAmount = trade.tradingForEthAmount;
      newTrade.alreadyTraded = trade.alreadyTraded;

      newTrade.tradingTokenName = tradingErc20Name;
      newTrade.tradingTokenSymbol = tradingErc20Symbol;

      return newTrade;
    }));

    let tradesOfEthToTokens3 = await Promise.all(tradesOfEthToTokens2.map(async(trade) => {
      const tradingForErc20Instance = new ethers.Contract(trade.tradingForTokenAddress, erc20Abi, provider);

      const tradingForErc20Name = await tradingForErc20Instance.name();
      const tradingForErc20Symbol = await tradingForErc20Instance.symbol();

      const newTrade = {};

      newTrade.sender = trade.sender;
      newTrade.indexOfTradeOfAddress = trade.indexOfTradeOfAddress;
      newTrade.tradingEthAmount = trade.tradingEthAmount;
      newTrade.tradingForTokenAddress = trade.tradingForTokenAddress;
      newTrade.tradingForTokenAmount = trade.tradingForTokenAmount;
      newTrade.alreadyTraded = trade.alreadyTraded;

      newTrade.tradingForTokenName = tradingForErc20Name;
      newTrade.tradingForTokenSymbol = tradingForErc20Symbol;

      return newTrade;
    }));

    setTradesOfTokensToTokens(tradesOfTokensToTokens3);
    setTradesOfTokensToEth(tradesOfTokensToEth3);
    setTradesOfEthToTokens(tradesOfEthToTokens3);
  }


  getTrades();

  setSearchedForTokenNameTrading('TestToken1');
}, []);

// const tradingErc20Instance = new ethers.Contract(trade.tradingTokenAddress, erc20Abi, provider);
// const tradingForErc20Instance = new ethers.Contract(trade.tradingForTokenAddress, erc20Abi, provider);

// const tradingErc20Name = await tradingErc20Instance.name();
// const tradingErc20Symbol = await tradingErc20Instance.symbol();
//
// const tradingForErc20Name = await tradingForErc20Instance.name();
// const tradingForErc20Symbol = await tradingForErc20Instance.symbol();

// console.log('trading erc20 name', tradingErc20Name);
// console.log('searched for token name trading', searchedForTokenNameTrading);

// if (tradingErc20Name !== searchedForTokenNameTrading) {
//   console.log('here3');
//   return;
// }

// if (!searchedForTokenNameTrading) {
//   if (tradingForErc20Name !== searchedForTokenNameForTrading) {
//     return;
//   }
// }

// console.log('here2');


  // console.log('tradesOfTokensToTokensJsx', tradesOfTokensToTokensJsx);



  // await getTokenAddressesTokensForTokensTrades();
  // await getTokenAddressesTokensForEthTrades();
  // await getTokenAddressesEthForTokensTrades();
  //
  // async function getAllTrades() {
  //   console.log('here');
  //
  //   await getTokensForTokensTrades();
  //   await getTokensForEthTrades();
  //   await getEthForTokensTrades();
  //
  //   const trades = await Promise.all([
  //     tradesOfTokensToTokensPromise,
  //     tradesOfTokensToEthPromise,
  //     tradesOfEthToTokensPromise
  //   ]);
  //
  //   tradesOfTokensToTokens = trades[0];
  //   tradesOfTokensToEth = trades[1];
  //   tradesOfEthToTokens = trades[2];
  // }

  // await getAllTrades();
  /*
    {
      tradeTokensForTokensForCall: [],
      tradeTokensForEthForCall: [],
      tradeEthForTokensForCall []
    }

  */

  // let tradesTokenNames = [];
  // let alreadyInTradesTokenNames = {};
  //
  // let tradesForTokenNames = [];
  // let alreadyInTradesForTokenNames = {};

  // console.log('here');
  //
  // console.log('trades token names', tradesTokenNames);
  // console.log('trades token symbols', tradesTokenSymbols);
  // console.log('already in trades token addresses', alreadyInTradesTokenAddresses);
  //
  // console.log('trades for token names', tradesForTokenNames);
  // console.log('trades token symbols', tradesForTokenSymbols);
  // console.log('already in trades for token addresses', alreadyInTradesForTokenAddresses);

  // console.log('searched for token name trading in form submit', searchedForTokenNameTrading);

  // await getAllTrades();

  // forceUpdate();
  // forceUpdate();
  // tokensForTokensTrades = tokensForTokensTrades.filter(trade => {
  //   const tradingErc20Instance = new ethers.Contract(trade.tradingTokenAddress, erc20Abi, provider);
  //   const tradingForErc20Instance = new ethers.Contract(trade.tradingForTokenAddress, erc20Abi, provider);
  //
  //   const tradingErc20Name = await tradingErc20Instance.name();
  //   const tradingErc20Symbol = await tradingErc20Instance.symbol();
  //
  //   const tradingForErc20Name = await tradingForErc20Instance.name();
  //   const tradingForErc20Symbol = await tradingForErc20Instance.symbol();
  // });

  // console.log('searched for token name trading in form submit', searchedForTokenNameTrading);

  // await getAllTrades();

  // forceUpdate();
  // forceUpdate();
  // tokensForTokensTrades = tokensForTokensTrades.filter(trade => {
  //   const tradingErc20Instance = new ethers.Contract(trade.tradingTokenAddress, erc20Abi, provider);
  //   const tradingForErc20Instance = new ethers.Contract(trade.tradingForTokenAddress, erc20Abi, provider);
  //
  //   const tradingErc20Name = await tradingErc20Instance.name();
  //   const tradingErc20Symbol = await tradingErc20Instance.symbol();
  //
  //   const tradingForErc20Name = await tradingForErc20Instance.name();
  //   const tradingForErc20Symbol = await tradingForErc20Instance.symbol();
  // });

  // console.log('searched for token name trading in form submit', searchedForTokenNameTrading);

  // await getAllTrades();

  // forceUpdate();
  // forceUpdate();
  // tokensForTokensTrades = tokensForTokensTrades.filter(trade => {
  //   const tradingErc20Instance = new ethers.Contract(trade.tradingTokenAddress, erc20Abi, provider);
  //   const tradingForErc20Instance = new ethers.Contract(trade.tradingForTokenAddress, erc20Abi, provider);
  //
  //   const tradingErc20Name = await tradingErc20Instance.name();
  //   const tradingErc20Symbol = await tradingErc20Instance.symbol();
  //
  //   const tradingForErc20Name = await tradingForErc20Instance.name();
  //   const tradingForErc20Symbol = await tradingForErc20Instance.symbol();
  // });

  // console.log('searched for token name trading in form submit', searchedForTokenNameTrading);

  // await getAllTrades();

  // forceUpdate();
  // forceUpdate();
  // tokensForTokensTrades = tokensForTokensTrades.filter(trade => {
  //   const tradingErc20Instance = new ethers.Contract(trade.tradingTokenAddress, erc20Abi, provider);
  //   const tradingForErc20Instance = new ethers.Contract(trade.tradingForTokenAddress, erc20Abi, provider);
  //
  //   const tradingErc20Name = await tradingErc20Instance.name();
  //   const tradingErc20Symbol = await tradingErc20Instance.symbol();
  //
  //   const tradingForErc20Name = await tradingForErc20Instance.name();
  //   const tradingForErc20Symbol = await tradingForErc20Instance.symbol();
  // });

  // console.log('dex abi', dexAbi);
  //
  // console.log('config', config);
  // console.log('config dex address', config.dexAddress);

  // console.log('here');

  // useEffect(async () => {
  //   console.log('trades of tokens to tokens', tradesOfTokensToTokens);
  // },[tradesOfTokensToTokens]);

  // const fetchDexTrades = () => {
    // const tokenForTokensTradesDexReturn =

      // .then(trade => {
      //   console.log('trade', trade);
      //   console.log('trade.tradingTokenAddress', trade.tradingTokenAddress);
      //   const tradingErc20Instance = new ethers.Contract(trade.tradingTokenAddress, erc20Abi, provider);
      //   const tradingForErc20Instance = new ethers.Contract(trade.tradingForTokenAddress, erc20Abi, provider);
      //
      //   const tradingErc20NamePromise = tradingErc20Instance.name();
      //   const tradingErc20SymbolPromise = tradingErc20Instance.symbol();
      //
      //   const tradingForErc20NamePromise = tradingForErc20Instance.name();
      //   const tradingForErc20SymbolPromise = tradingForErc20Instance.symbol();
      //
      //   Promise.all([
      //     tradingErc20NamePromise,
      //     tradingErc20SymbolPromise,
      //     tradingForErc20NamePromise,
      //     tradingForErc20SymbolPromise
      //   ])
      //     .then(res => {
      //       console.log('res', res);
      //       trade.tradingTokenName = res[0];
      //       trade.tradingTokenSymbol = res[1];
      //       trade.tradingForTokenName = res[2];
      //       trade.tradingForTokenSymbol = res[3];
      //     })
      //     .catch(err => {
      //       console.log(err);
      //     })
      //
      //   setTradesOfTokensToTokens(trade);
      // })
      // .catch(err => {
      //   console.log(err);
      // })

    // const tokenForEthTradesDexReturn =

      // .then(trade => {
      //   const tradingErc20Instance = new ethers.Contract(trade.tradingTokenAddress, erc20Abi, provider);
      //
      //   const tradingErc20NamePromise = tradingErc20Instance.name();
      //   const tradingErc20SymbolPromise = tradingErc20Instance.symbol();
      //
      //   Promise.all([
      //     tradingErc20NamePromise,
      //     tradingErc20SymbolPromise
      //   ])
      //     .then(res => {
      //       trade.tradingTokenName = res[0];
      //       trade.tradingTokenSymbol = res[1];
      //     })
      //     .catch(err => {
      //       console.log(err);
      //     })
      //
      //
      //   setTradesOfTokensToEth(trade);
      // })
      // .catch(err => {
      //   console.log(err);
      // })
    // const ethForTokensTradesDexReturn



      // .then(trade => {
      //   const tradingForErc20Instance = new ethers.Contract(trade.tradingForTokenAddress, erc20Abi, provider);
      //
      //   const tradingForErc20NamePromise = tradingForErc20Instance.name();
      //   const tradingForErc20SymbolPromise = tradingForErc20Instance.symbol();
      //
      //   Promise.all([
      //     tradingForErc20NamePromise,
      //     tradingForErc20SymbolPromise
      //   ])
      //     .then(res => {
      //       trade.tradingForTokenName = res[0];
      //       trade.tradingForTokenSymbol = res[1];
      //     })
      //     .catch(err => {
      //       console.log(err);
      //     })
      //
      //   setTradesOfEthToTokens(trade);
      // })
      // .catch(err => {
      //   console.log(err);
      // })

    // console.log('token for tokens trades dex return', tokenForTokensTradesDexReturn);
    // console.log('token for eth trades dex return', tokenForEthTradesDexReturn);
    // console.log('eth for tokens trades dex return', ethForTokensTradesDexReturn);

    // console.log('trades of eth to tokens 2', tradesOfEthToTokens);
  // }

  // fetchDexTrades();



  // let tradesOfTokensToTokens;
  // let tradesOfTokensToEth;
  // let tradesOfEthToTokens;

  // let tradesOfTokensToTokensJsx;
  // let tradesOfTokensToEthJsx;
  // let tradesOfEthToTokensJsx;

  // let tradesTokenNames = [];
  // let tradesTokenSymbols = [];
  // let tradesTokenAddresses = [];
  // let alreadyInTradesTokenAddresses = {};

  // let tradesForTokenNames = [];
  // let tradesForTokenSymbols = [];
  // let tradesForTokenAddresses = [];
  // let alreadyInTradesForTokenAddresses = {};

  function getTokensForTokensTradesJsx(tradesOfTokensToTokensArg) {
    if (tradesOfTokensToTokensArg) {
      const tradesOfTokensToTokensJsxIn = tradesOfTokensToTokensArg.map((trade, index) => {
          // trade.tradingTokenAddress

          if (trade.alreadyTraded === true) {
            return;
          }

          return (
            <div class="border rounded mb-1" className="trade-of-tokens-for-tokens" key={index.toString()}>
              <div className="trades-sender" className="trade-of-tokens-for-tokens-sender-wrap" className="trade-inner-wrap">
                <div className="trade-address-overflow">
                  Seller
                </div>
                <div className="trade-of-tokens-for-tokens-sender">
                  {trade.sender}
                </div>
              </div>
              <div className="trade-of-tokens-for-tokens-index-wrap" className="trade-inner-wrap">
                <div>
                  Index
                </div>
                <div className="trade-of-tokens-for-tokens-index">
                  {Number(trade.indexOfTradeOfAddress)}
                </div>
              </div>
              <div>
                <div className="what-they-will-be-trading-inner-header">
                  What They Will Be Trading
                </div>
              </div>
              <div className="trade-inner-wrap">
                <div>
                </div>
                <div>
                  {trade.tradingTokenName}
                </div>
              </div>
              <div className="trade-inner-wrap">
                <div>
                </div>
                <div>
                  {trade.tradingTokenSymbol}
                </div>
              </div>
              <div className="trade-of-tokens-for-tokens-trading-token-address-wrap" className="trade-inner-wrap">
                <div>
                  Token Address
                </div>
                <div className="trade-address-overflow" className="trade-of-tokens-for-tokens-trading-token-address"mclassName="trade-inner-wrap">
                  {trade.tradingTokenAddress}
                </div>
              </div>
              <div className="trade-of-tokens-for-tokens-trading-token-amount-wrap" className="trade-inner-wrap">
                <div>
                  Token Amount
                </div>
                <div>
                  {Number(trade.tradingTokenAmount)}
                </div>
              </div>
              <div>
                <div class="what-you-will-be-trading-inner-header">
                  What You Will Be Trading
                </div>
              </div>
              <div className="trade-inner-wrap">
                <div>
                </div>
                <div>
                  {trade.tradingForTokenName}
                </div>
              </div>
              <div className="trade-inner-wrap">
                <div>
                </div>
                <div>
                  {trade.tradingForTokenSymbol}
                </div>
              </div>
              <div className="trade-of-tokens-for-tokens-trading-for-token-address-wrap" className="trade-inner-wrap">
                <div>
                  Token Address
                </div>
                <div className="trade-address-overflow">
                  {trade.tradingForTokenAddress}
                </div>
              </div>
              <div className="trade-of-tokens-for-tokens-trading-for-token-amount-wrap" className="trade-inner-wrap">
                <div>
                  Token Amount
                </div>
                <div>
                  {Number(trade.tradingForTokenAmount)}
                </div>
              </div>
              <div className="make-token-trade-button-wrap">
                <MakeTokenToTokenTrade
                  sender={trade.sender}
                  indexOfTradeOfAddress={trade.indexOfTradeOfAddress}
                  tradingForTokenAddress={trade.tradingForTokenAddress}
                  tradingForTokenAmount={trade.tradingForTokenAmount}
                />
              </div>
            </div>
          )
      });

      return tradesOfTokensToTokensJsxIn;
    }

  }

  function getTokensForEthTradesJsx(tradesOfTokensToEthArg) {
    if (tradesOfTokensToEthArg) {

      console.log('here 21');
      console.log('tradesOfTokensToEthArg', tradesOfTokensToEthArg);
      const tradesOfTokensToEthJsxIn = tradesOfTokensToEthArg.map((trade, index) => {

        if (trade.alreadyTraded === true) {
          return;
        }

        return (
          <div class="border rounded mb-1" className="trade-of-tokens-for-eth" key={index.toString()}>
            <div className="trades-sender" className="trade-of-tokens-for-eth-sender-wrap" className="trade-inner-wrap">
              <div>
                Seller
              </div>
              <div>
                {trade.sender}
              </div>
            </div>
            <div className="trade-of-tokens-for-eth-index-wrap" className="trade-inner-wrap">
              <div>
                Index
              </div>
              <div>
                {Number(trade.indexOfTradeOfAddress)}
              </div>
            </div>
            <div>
              <div className="what-they-will-be-trading-inner-header">
                What They Will Be Trading
              </div>
            </div>
            <div className="trade-inner-wrap">
              <div>
              </div>
              <div>
                {trade.tradingTokenName}
              </div>
            </div>
            <div className="trade-inner-wrap">
              <div>
              </div>
              <div>
                {trade.tradingTokenSymbol}
              </div>
            </div>
            <div className="trade-of-tokens-for-eth-trading-token-address-wrap" className="trade-inner-wrap">
              <div>
                Token Address
              </div>
              <div>
                {trade.tradingTokenAddress}
              </div>
            </div>
            <div className="trade-of-tokens-for-eth-trading-token-amount-wrap" className="trade-inner-wrap">
              <div>
                Token Amount
              </div>
              <div>
                {Number(trade.tradingTokenAmount)}
              </div>
            </div>
            <div>
              <div class="what-you-will-be-trading-inner-header">
                What You Will Be Trading
              </div>
            </div>
            <div className="trade-of-tokens-for-eth-trading-for-eth-amount-wrap" className="trade-inner-wrap">
              <div>
                Eth Amount
              </div>
              <div>
                {ethers.formatUnits(trade.tradingForEthAmount)}
              </div>
            </div>
            <div>
              <MakeEthToTokenTrade
                sender={trade.sender}
                indexOfTradeOfAddress={trade.indexOfTradeOfAddress}
                tradingForEthAmount={trade.tradingForEthAmount}
              />
            </div>
          </div>
        )
      });

      console.log('tradesOfTokensToEthJsxIn', tradesOfTokensToEthJsxIn);
      return tradesOfTokensToEthJsxIn;
    }
  }

  function getEthForTokensTradesJsx(tradesOfEthToTokensArg) {
    if (tradesOfEthToTokensArg) {

      console.log('here 22');

      const tradesOfEthToTokensJsxIn = tradesOfEthToTokensArg.map((trade, index) => {

        if (trade.alreadyTraded === true) {
          return;
        }

        return (
          <div class="border rounded mb-1" className="trade-of-eth-for-tokens" key={index.toString()}>
            <div className="trades-sender" className="trade-of-eth-for-tokens-sender-wrap" className="trade-inner-wrap">
              <div>
                Seller
              </div>
              <div className="trade-address-overflow">
                {trade.sender}
              </div>
            </div>
            <div className="trade-of-eth-for-tokens-index-wrap" className="trade-inner-wrap">
              <div>
                Index
              </div>
              <div>
                {Number(trade.indexOfTradeOfAddress)}
              </div>
            </div>
            <div>
              <div className="what-they-will-be-trading-inner-header">
                What They Will Be Trading
              </div>
            </div>
            <div className="trade-of-eth-for-tokens-trading-eth-amount-wrap" className="trade-inner-wrap">
              <div>
                Eth Amount
              </div>
              <div>
                {ethers.formatUnits(trade.tradingEthAmount)}
              </div>
            </div>
            <div>
              <div class="what-you-will-be-trading-inner-header">
                What You Will Be Trading
              </div>
            </div>
            <div className="trade-inner-wrap">
              <div>
              </div>
              <div>
                {trade.tradingForTokenName}
              </div>
            </div>
            <div className="trade-inner-wrap">
              <div>
              </div>
              <div>
                {trade.tradingForTokenSymbol}
              </div>
            </div>
            <div className="trade-of-eth-for-tokens-trading-for-token-addressx-wrap" className="trade-inner-wrap">
              <div>
                Token Address
              </div>
              <div>
                {trade.tradingForTokenAddress}
              </div>
            </div>
            <div className="trade-of-eth-for-tokens-trading-for-amount-wrap" className="trade-inner-wrap">
              <div>
                Token Amount
              </div>
              <div>
                {Number(trade.tradingForTokenAmount)}
              </div>
            </div>
            <div>
              <MakeTokenToEthTrade
                sender={trade.sender}
                indexOfTradeOfAddress={trade.indexOfTradeOfAddress}
                tradingForTokenAddress={trade.tradingForTokenAddress}
                tradingForTokenAmount={trade.tradingForTokenAmount}
              />
            </div>
          </div>
        )
      });

      console.log('tradesOfEthToTokensJsxIn', tradesOfEthToTokensJsxIn);
      return tradesOfEthToTokensJsxIn;
    }
  }
